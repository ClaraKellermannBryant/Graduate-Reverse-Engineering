# This challenge demonstrates static malware analysis on a command-and-control trojan class in x64
# The challenge does not use any reverse engineering tools and is approximate for deconstructing higher-level languages
# The trojan example is derived from Justin Seitz and Tim Arnold here: https://www.amazon.com/Black-Hat-Python-2nd-Programming/dp/1718501129


#_GLOBAL_sub_|_trojan:

	pushq %rbp
	movq %rsp, %rbp
	call init
	movq %rbx
	movq $id, (%rax, %rcx, 8)
	movq $id, %ecx
	shr %ecx, 1

	movq (%rbp), %rax
	movq %rdi, %rdx
	movq %rbp, %rsp
	popq %rbp ret
